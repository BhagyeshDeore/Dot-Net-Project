@model IEnumerable<IdentityDemo2.Models.Problem>

<style>

    .leaderboard-container {
        padding: 20px; /* Adjust padding to make the leaderboard smaller */
        max-width: 350px;
        background-color: #ffe0b3; /* Light gray card background color */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle box shadow */
        border: 1px solid #e0e0e0; /* Light border color */
        border-radius: 10px; /* Rounded corners */
        margin-bottom: 20px; /* Margin below leaderboard */
        transition: box-shadow 0.3s ease; /* Smooth transition for box shadow */
        /* Add hover effect */
        cursor: pointer; /* Change cursor to pointer on hover */
    }

        .leaderboard-container:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Increase box shadow on hover */
            transform: scale(1.02);
        }

    /* Add background color to the entire page */
    body {
        background-color: #fff5e6; /* Light orange background color */
    }

    /* Style the cards with a background color */
    .card {
        background-color: #ffe0b3; /* Light gray card background color */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle box shadow */
        border: 1px solid #e0e0e0; /* Light border color */
        border-radius: 10px; /* Optional: Add border-radius for rounded corners */
        margin-bottom: 20px; /* Optional: Add margin between cards */
        border-color: #ffb366;
        transition: transform 0.3s; /* Optional: Add a smooth transition effect */
    }

    .card:hover {
        transform: scale(1.02); /* Optional: Scale up the card on hover for a subtle interaction */
    }


    /* Customize card title and button colors */
    .card-title,
    .btn-info {
        color: #333333; /* Dark gray text color */
    }

    .btn-info {
        background-color: #ffb366; /* Even lighter orangish button color */
        border-color: #ffb366; /* Even lighter orangish border color */
    }

        /* Remove hover effect on the button */
        .btn-info:hover {
            background-color: #ffb366; /* Keep the same color on hover */
            border-color: #ffb366; /* Keep the same border color on hover */
        }
</style>

<div class="container">
    <div class="row">
        <!-- Problem cards column -->
        <div class="col-md-9">
            <h5>Contest Id: @ViewData["ContestNumber"], Contest Title: @ViewData["ContestTitle"]</h5>
            <div class="row">
                @foreach (var item in Model)
                {
                    <div class="col-md-12">
                        <div class="card mb-4 difficulty-filter-card" data-difficulty="@Html.DisplayFor(modelItem => item.DifficultyLevel)">
                            <div class="card-body">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Title)</h5>
                                <p class="card-text">
                                    <strong>Difficulty:</strong> @Html.DisplayFor(modelItem => item.DifficultyLevel) <br />
                                    <strong>Marks:</strong> @Html.DisplayFor(modelItem => item.Marks)
                                </p>
                                <a asp-controller="Problems" asp-action="AttemptProblem" asp-route-problemId="@item.Id" class="btn btn-info">Attempt</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div><!-- End of problem cards column -->
        <!-- Difficulty filter and leaderboard column -->
        <div class="col-md-3">
            <div class="row">
                <!-- Difficulty filter column -->
                <div class="col-md-12 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Difficulty Level</h5>
                            <form id="difficultyFilterForm">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="easyCheckbox" value="EASY" onchange="applyDifficultyFilter()">
                                    <label class="form-check-label" for="easyCheckbox">Easy</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="mediumCheckbox" value="MEDIUM" onchange="applyDifficultyFilter()">
                                    <label class="form-check-label" for="mediumCheckbox">Medium</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="hardCheckbox" value="HARD" onchange="applyDifficultyFilter()">
                                    <label class="form-check-label" for="hardCheckbox">Hard</label>
                                </div>
                            </form>
                        </div>
                    </div>
                </div><!-- End of difficulty filter column -->
            </div>

            <!-- Leaderboard column -->
            <div class="row">
                <div class="col-md-12">
                    <div class="leaderboard-container">
                       @*  <h3>Leaderboard</h3> *@
                        @{
                            await Html.RenderPartialAsync("~/Views/Attempts/Leaderboard.cshtml", ViewData["LeaderboardData"]);
                        }
                    </div>
                </div>
            </div><!-- End of leaderboard column -->
        </div><!-- End of difficulty filter and leaderboard column -->
    </div>
</div>

@section Scripts {
    <script>
        function applyDifficultyFilter() {
            var checkboxes = document.querySelectorAll('input[type="checkbox"]');
            var cards = document.querySelectorAll('.difficulty-filter-card');

            cards.forEach(function (card) {
                var difficulty = card.getAttribute('data-difficulty');
                var matches = Array.from(checkboxes)
                    .filter(function (checkbox) {
                        return checkbox.checked && (checkbox.value === difficulty || checkbox.value === '');
                    });

                card.style.display = matches.length > 0 ? 'block' : 'none';
            });
        }
    </script>
}
